# Git Analytics Report

**Generated on:** {{ generated_at }}
**Repository:** {{ repo_path }}
**Date Range:** {{ start_date }} to {{ end_date }}

---

## Executive Summary

{{ executive_summary }}

---

## Thematic Analysis

{% for category, results in categorized_commits.items() %}
### {{ category }} ({{ results | length }} commit{{ 's' if (results | length) > 1 else '' }})
{% for result in results %}
- **{{ result.commit.commit_hash[:7] }}** by {{ result.commit.author_name }} on {{ result.commit.date_str }}: {{ result.summary }}
{% endfor %}
{% endfor %}

{% if author_summary %}
## Contributor Summary

| Author        | Features | Bug Fixes | Docs | Refactor | Tests | Build | Perf. | Chores |
|---------------|----------|-----------|------|----------|-------|-------|-------|--------|
{% for author, categories in author_summary.items() %}
| **{{ author }}** | {{ categories.get('Features', 0) }} | {{ categories.get('Bug Fixes', 0) }} | {{ categories.get('Documentation', 0) }} | {{ categories.get('Code Refactoring', 0) }} | {{ categories.get('Tests', 0) }} | {{ categories.get('Build System', 0) }} | {{ categories.get('Performance Improvements', 0) }} | {{ categories.get('Chores', 0) }} |
{% endfor %}
{% endif %}

{% if code_health_summary %}
## Code Health Summary

This section highlights the top 5 most frequently modified Python files (churn) and their average cyclomatic complexity. High churn and complexity can indicate areas of potential technical debt.

| File Path | Churn (Commits) | Avg. Complexity |
|-----------|-----------------|-----------------|
{% for item in code_health_summary %}
| `{{ item.file_path }}` | {{ item.churn_count }} | {{ item.complexity }} |
{% endfor %}
{% endif %}

---
*Report generated by Git Analytics at {{ generated_at }}*
